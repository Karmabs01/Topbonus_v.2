{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/utils/mailer.ts"],"sourcesContent":["import nodemailer from 'nodemailer';\n\n// Создание транспортера с использованием SMTP\nconst transporter = nodemailer.createTransport({\n  host: process.env.SMTP_HOST,\n  port: parseInt(process.env.SMTP_PORT || '587'),\n  secure: false, // Используем false для STARTTLS\n  auth: {\n    user: process.env.SMTP_USER,\n    pass: process.env.SMTP_PASS,\n  },\n  tls: {\n    rejectUnauthorized: false, // Если SSL-сертификат самоподписан\n  },\n});\n\nexport const sendEmail = async (to: string, subject: string, text: string) => {\n  console.log(`Trying to send email to ${to} with subject \"${subject}\"`);\n\n  const mailOptions = {\n    from: `\"Topbonus\" <info@bubenbot.com>`, // Отправитель\n    to, // Получатель\n    subject, // Тема письма\n    text, // Текст письма\n  };\n\n  try {\n    // Отправляем письмо\n    const info = await transporter.sendMail(mailOptions);\n    console.log(`Email sent to ${to}`);\n    console.log('Info for letter:', info);\n  } catch (error) {\n    console.error(`Error sending to ${to}:`, error);\n    throw error;\n  }\n};\n"],"names":[],"mappings":";;;;;;AAEA,8CAA8C;AAC9C,MAAM,cAAc,iJAAA,CAAA,UAAU,CAAC,eAAe,CAAC;IAC7C,MAAM,QAAQ,GAAG,CAAC,SAAS;IAC3B,MAAM,SAAS,QAAQ,GAAG,CAAC,SAAS,IAAI;IACxC,QAAQ;IACR,MAAM;QACJ,MAAM,QAAQ,GAAG,CAAC,SAAS;QAC3B,MAAM,QAAQ,GAAG,CAAC,SAAS;IAC7B;IACA,KAAK;QACH,oBAAoB;IACtB;AACF;AAEO,MAAM,YAAY,OAAO,IAAY,SAAiB;IAC3D,QAAQ,GAAG,CAAC,CAAC,wBAAwB,EAAE,GAAG,eAAe,EAAE,QAAQ,CAAC,CAAC;IAErE,MAAM,cAAc;QAClB,MAAM,CAAC,8BAA8B,CAAC;QACtC;QACA;QACA;IACF;IAEA,IAAI;QACF,oBAAoB;QACpB,MAAM,OAAO,MAAM,YAAY,QAAQ,CAAC;QACxC,QAAQ,GAAG,CAAC,CAAC,cAAc,EAAE,GAAG,CAAC;QACjC,QAAQ,GAAG,CAAC,oBAAoB;IAClC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,CAAC,iBAAiB,EAAE,GAAG,CAAC,CAAC,EAAE;QACzC,MAAM;IACR;AACF"}},
    {"offset": {"line": 42, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/utils/db.ts"],"sourcesContent":["// app/utils/db.ts\n\nimport { PrismaClient } from '@prisma/client';\n\ndeclare global {\n  var prisma: PrismaClient | undefined;\n}\n\nconst prisma = global.prisma || new PrismaClient();\n\nif (process.env.NODE_ENV !== 'production') global.prisma = prisma;\n\nexport default prisma;\n"],"names":[],"mappings":"AAAA,kBAAkB;;;;;;;AAQlB,MAAM,SAAS,OAAO,MAAM,IAAI,IAAI,uDAAA,CAAA,eAAY;AAEhD,wCAA2C,OAAO,MAAM,GAAG;uCAE5C"}},
    {"offset": {"line": 57, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 62, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/api/send-otp/route.ts"],"sourcesContent":["// app/api/send-otp/route.ts\n\nimport { NextResponse } from 'next/server';\nimport { sendEmail } from '@/app/utils/mailer';\nimport { v4 as uuidv4 } from 'uuid';\nimport prisma from '@/app/utils/db';\n\nexport async function POST(request: Request) {\n  try {\n    const { email } = await request.json();\n    console.log(`Received OTP request for email: ${email}`);\n\n    if (!email || typeof email !== 'string') {\n      console.error('Invalid format:', email);\n      return NextResponse.json(\n        { success: false, message: 'Invalid email format.' },\n        { status: 400 }\n      );\n    }\n\n    const otpCode = Math.floor(100000 + Math.random() * 900000).toString();\n    const otpId = uuidv4();\n    const expiresAt = new Date(Date.now() + 5 * 60 * 1000);\n\n    // Удаляем старые OTP для этого email\n    await prisma.otps.deleteMany({\n      where: { email },\n    });\n\n    // Сохраняем новый OTP\n    await prisma.otps.create({\n      data: {\n        id: otpId,\n        email,\n        code: otpCode,\n        expires_at: expiresAt,\n      },\n    });\n\n    await sendEmail(email, 'One-time code for topbon.us', `Your code: ${otpCode}`);\n    console.log(`OTP successfully sent to ${email}`);\n\n    return NextResponse.json({ success: true, otpId });\n  } catch (error) {\n    console.error('Error processing send-otp request:', error);\n    return NextResponse.json(\n      { success: false, message: 'Failed to send OTP.' },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"AAAA,4BAA4B;;;;;;;;;;;;;AAOrB,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,QAAQ,IAAI;QACpC,QAAQ,GAAG,CAAC,CAAC,gCAAgC,EAAE,MAAM,CAAC;QAEtD,IAAI,CAAC,SAAS,OAAO,UAAU,UAAU;YACvC,QAAQ,KAAK,CAAC,mBAAmB;YACjC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,SAAS;YAAwB,GACnD;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,UAAU,KAAK,KAAK,CAAC,SAAS,KAAK,MAAM,KAAK,QAAQ,QAAQ;QACpE,MAAM,QAAQ,CAAA,GAAA,oLAAA,CAAA,KAAM,AAAD;QACnB,MAAM,YAAY,IAAI,KAAK,KAAK,GAAG,KAAK,IAAI,KAAK;QAEjD,qCAAqC;QACrC,MAAM,oHAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YAC3B,OAAO;gBAAE;YAAM;QACjB;QAEA,sBAAsB;QACtB,MAAM,oHAAA,CAAA,UAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACvB,MAAM;gBACJ,IAAI;gBACJ;gBACA,MAAM;gBACN,YAAY;YACd;QACF;QAEA,MAAM,CAAA,GAAA,wHAAA,CAAA,YAAS,AAAD,EAAE,OAAO,+BAA+B,CAAC,WAAW,EAAE,QAAQ,CAAC;QAC7E,QAAQ,GAAG,CAAC,CAAC,yBAAyB,EAAE,MAAM,CAAC;QAE/C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAM;QAAM;IAClD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,sCAAsC;QACpD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,SAAS;QAAsB,GACjD;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 122, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}