{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/utils/db.ts"],"sourcesContent":["// app/utils/db.ts\n\nimport { PrismaClient } from '@prisma/client';\n\ndeclare global {\n  var prisma: PrismaClient | undefined;\n}\n\nconst prisma = global.prisma || new PrismaClient();\n\nif (process.env.NODE_ENV !== 'production') global.prisma = prisma;\n\nexport default prisma;\n"],"names":[],"mappings":"AAAA,kBAAkB;;;;;;;AAQlB,MAAM,SAAS,OAAO,MAAM,IAAI,IAAI,uDAAA,CAAA,eAAY;AAEhD,wCAA2C,OAAO,MAAM,GAAG;uCAE5C"}},
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 20, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/api/verify-otp/route.ts"],"sourcesContent":["// app/api/verify-otp/route.ts\n\nimport { NextResponse } from 'next/server';\nimport prisma from '@/app/utils/db';\nimport { cookies } from 'next/headers'; // Для Next.js 13+\n\n// Функция для отправки события в Customer.io\nasync function sendCustomerIOEvent(customerId: string, email: string) {\n  const siteId = process.env.CUSTOMERIO_GURU_SITE_ID;\n  const apiKey = process.env.CUSTOMERIO_GURU_API_KEY;\n\n  if (!siteId || !apiKey) {\n    console.error('Customer.io credentials are not set in environment variables.');\n    return;\n  }\n\n  const url = `https://track.customer.io/api/v1/customers/${encodeURIComponent(customerId)}/events`;\n\n  const payload = {\n    name: 'ppc_reg',\n    data: {\n      keyword: customerId,\n      email: email,\n    },\n  };\n\n  const auth = Buffer.from(`${siteId}:${apiKey}`).toString('base64');\n\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Basic ${auth}`,\n      },\n      body: JSON.stringify(payload),\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(`Failed to send event to Customer.io: ${response.status} ${errorText}`);\n    } else {\n      console.log('Event ppc_reg успешно отправлен в Customer.io.');\n    }\n  } catch (error) {\n    console.error('Ошибка при отправке события в Customer.io:', error);\n  }\n}\n\n// Функция для отправки постбека в BidVertiser\nasync function sendBidVertiserPostback(aid: string, bvClickId: string, revenue: number) {\n  const postbackUrl = 'https://secure.bidvertiser.com/performance/pc.dbm'; // Используем HTTPS\n  const params = {\n    ver: '1.0',\n    AID: aid, // Динамический AID из параметров\n    CLICKID: bvClickId,\n    revenue: revenue.toString(),\n  };\n\n  const urlWithParams = `${postbackUrl}?${new URLSearchParams(params).toString()}`;\n\n  try {\n    const response = await fetch(urlWithParams, {\n      method: 'GET',\n      // Примечание: fetch API в Node.js не поддерживает таймаут напрямую. Можно использовать AbortController для этого.\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(`Failed to send postback to BidVertiser: ${response.status} ${errorText}`);\n    } else {\n      console.log('Postback успешно отправлен в BidVertiser.');\n    }\n  } catch (error) {\n    console.error('Ошибка при отправке постбека в BidVertiser:', error);\n  }\n}\n\nexport async function POST(request: Request) {\n  try {\n    const { otpId, otpCode, email } = await request.json();\n\n    console.log('Received data:', { otpId, otpCode, email });\n\n    const otpEntry = await prisma.otps.findUnique({\n      where: { id: otpId },\n    });\n\n    if (!otpEntry || otpEntry.email !== email || otpEntry.code !== otpCode) {\n      return NextResponse.json(\n        { success: false, message: 'Invalid OTP code or email.' },\n        { status: 400 }\n      );\n    }\n\n    const currentTime = new Date();\n    if (currentTime > new Date(otpEntry.expires_at)) {\n      await prisma.otps.delete({ where: { id: otpId } });\n      return NextResponse.json(\n        { success: false, message: 'OTP code has expired.' },\n        { status: 400 }\n      );\n    }\n\n    await prisma.otps.delete({ where: { id: otpId } });\n\n    const usernamePart = email.split('@')[0].replace(/[^a-zA-Z0-9]/g, '_');\n    const randomDigits = Math.floor(1000000 + Math.random() * 9000000).toString();\n    const login = `${usernamePart}_${randomDigits}`;\n    const id = `${usernamePart}_${randomDigits}_ppc1_1224`;\n\n    const existingUser = await prisma.users.findUnique({\n      where: { id },\n    });\n\n    if (existingUser) {\n      return NextResponse.json(\n        { success: false, message: 'User ID collision. Please try again.' },\n        { status: 500 }\n      );\n    }\n\n    await prisma.users.create({\n      data: {\n        login,\n        id,\n        VIP: \"\",\n        balance: 0.0,\n        country: 'N/A',\n        input: \"\",\n        password: \"\",\n        tickets: '50',\n        winbalance: \"\",\n        customer: 'GURU',\n        status_payment: \"\",\n        phone_number: \"\",\n        spins_waiting: \"\",\n        geo_approve: \"\",\n        leads: \"\",\n        sales: \"\",\n        qr_code: \"\",\n      },\n    });\n\n    // Отправка события в Customer.io после успешного создания пользователя\n    await sendCustomerIOEvent(id, email);\n\n    // Извлечение параметров из cookies\n    const cookieStore = cookies();\n    const aid = cookieStore.get('AID')?.value;\n    const bvClickId = cookieStore.get('CLICKID')?.value; // Исправлено на 'CLICKID'\n    // Дополнительные параметры, если необходимо:\n    // const bvSrcId = cookieStore.get('BV_SRCID')?.value;\n    // const bvCampId = cookieStore.get('BV_CAMPID')?.value;\n    // const bvGeo = cookieStore.get('BV_GEO')?.value;\n\n    if (aid && bvClickId) { // Отправляем постбек только если AID и CLICKID существуют\n      const revenue = 1; // Согласно документации, для тестирования используем revenue=1\n\n      // Отправка постбека в BidVertiser после успешного создания пользователя\n      await sendBidVertiserPostback(aid, bvClickId, revenue);\n    } else {\n      console.warn('AID или CLICKID не найдены в cookies. Постбек в BidVertiser не отправлен.');\n    }\n\n    return NextResponse.json({ success: true, message: 'OTP verified and user created.' });\n  } catch (error) {\n    console.error('Error verifying OTP or creating user:', error);\n    return NextResponse.json(\n      { success: false, message: 'Failed to verify OTP or create user.' },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 200, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}