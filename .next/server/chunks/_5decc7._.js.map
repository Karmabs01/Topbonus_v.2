{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/utils/db.js"],"sourcesContent":["// utils/db.js\nimport mysql from 'mysql2/promise';\n\nconst connection = mysql.createPool({\n  host: 'ny509616.mysql.tools', // Адрес сервера базы данных\n  user: 'ny509616_test', // Имя пользователя\n  password: 'gN@M6;h7z7', // Пароль\n  database: 'ny509616_test' // Имя базы данных\n});\n\nexport default connection;\n"],"names":[],"mappings":"AAAA,cAAc;;;;;;;AAGd,MAAM,aAAa,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;IAClC,MAAM;IACN,MAAM;IACN,UAAU;IACV,UAAU,gBAAgB,kBAAkB;AAC9C;uCAEe"}},
    {"offset": {"line": 19, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 24, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/api/send-otp/route.ts"],"sourcesContent":["// app/api/send-otp/route.ts\n\nimport { NextResponse } from 'next/server';\nimport { sendEmail } from '@/utils/mailer';\nimport { v4 as uuidv4 } from 'uuid';\nimport db from '@/utils/db';\n\nexport async function POST(request: Request) {\n  try {\n    const { email } = await request.json();\n    console.log(`Received OTP request for email: ${email}`);\n\n    // Проверка email\n    if (!email || typeof email !== 'string') {\n      console.error('Invalid format:', email);\n      return NextResponse.json(\n        { success: false, message: 'Invalid format' },\n        { status: 400 }\n      );\n    }\n\n    // Генерация и сохранение OTP\n    const otpCode = Math.floor(100000 + Math.random() * 900000).toString(); // 6 цифр\n    const otpId = uuidv4();\n    const expiresAt = new Date(Date.now() + 5 * 60 * 1000); // 5 минут\n\n    await db('otps10').insert({\n      id: otpId,\n      email,\n      code: otpCode,\n      expires_at: expiresAt,\n    });\n\n    // Отправка OTP по электронной почте\n    await sendEmail(email, 'One-time code for topbon.us', `Your code for topbon.us: ${otpCode}`);\n\n    return NextResponse.json({ success: true, otpId });\n  } catch (error) {\n    console.error('Error processing send-otp request:', error);\n    return NextResponse.json(\n      { success: false, message: 'Failed to send OTP' },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"AAAA,4BAA4B;;;;;;;;;;;;;;;;;AAOrB,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,QAAQ,IAAI;QACpC,QAAQ,GAAG,CAAC,CAAC,gCAAgC,EAAE,MAAM,CAAC;QAEtD,iBAAiB;QACjB,IAAI,CAAC,SAAS,OAAO,UAAU,UAAU;YACvC,QAAQ,KAAK,CAAC,mBAAmB;YACjC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,SAAS;YAAiB,GAC5C;gBAAE,QAAQ;YAAI;QAElB;QAEA,6BAA6B;QAC7B,MAAM,UAAU,KAAK,KAAK,CAAC,SAAS,KAAK,MAAM,KAAK,QAAQ,QAAQ,IAAI,SAAS;QACjF,MAAM,QAAQ,CAAA,GAAA,oLAAA,CAAA,KAAM,AAAD;QACnB,MAAM,YAAY,IAAI,KAAK,KAAK,GAAG,KAAK,IAAI,KAAK,OAAO,UAAU;QAElE,MAAM,CAAA,GAAA,6GAAA,CAAA,UAAE,AAAD,EAAE,UAAU,MAAM,CAAC;YACxB,IAAI;YACJ;YACA,MAAM;YACN,YAAY;QACd;QAEA,oCAAoC;QACpC,MAAM,UAAU,OAAO,+BAA+B,CAAC,yBAAyB,EAAE,QAAQ,CAAC;QAE3F,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAM;QAAM;IAClD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,sCAAsC;QACpD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,SAAS;QAAqB,GAChD;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 81, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}